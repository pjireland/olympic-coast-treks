# .github/workflows/deploy.yml
name: Deploy to Google Cloud Run

on:
  release:
    types: [published]
  workflow_dispatch: # Allows manual triggering

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: olympic-coast-treks
  REGION: us-west1
  REPOSITORY: olympic-coast-treks # Artifact Registry repository name

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          # Configure Docker to use Artifact Registry
          gcloud auth configure-docker $REGION-docker.pkg.dev
          # Verify authentication
          echo "Active account:"
          gcloud auth list --filter=status:ACTIVE --format="value(account)"
          # Verify project
          echo "Current project: $(gcloud config get-value project)"

      - name: Ensure Artifact Registry repository exists
        run: |
          # Check if repository exists, create if it doesn't
          if ! gcloud artifacts repositories describe $REPOSITORY --location=$REGION --format="value(name)" 2>/dev/null; then
            echo "Creating Artifact Registry repository: $REPOSITORY"
            gcloud artifacts repositories create $REPOSITORY \
              --repository-format=docker \
              --location=$REGION \
              --description="Docker repository for $SERVICE_NAME"
          else
            echo "Artifact Registry repository $REPOSITORY already exists"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        run: |
          cd backend
          # Set the image tag based on event type
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG="latest"
          fi

          # Use Artifact Registry URL format
          IMAGE_URL="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE_NAME"

          echo "Building and pushing image: $IMAGE_URL:$TAG"

          docker buildx build \
            --platform linux/amd64 \
            -t $IMAGE_URL:$TAG \
            -t $IMAGE_URL:latest \
            --push \
            .

      - name: Deploy to Cloud Run
        run: |
          # Use the same tag logic as build step
          if [ "${{ github.event_name }}" = "release" ]; then
            IMAGE_TAG="${{ github.event.release.tag_name }}"
          else
            IMAGE_TAG="latest"
          fi

          # Use Artifact Registry URL format
          IMAGE_URL="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$SERVICE_NAME:$IMAGE_TAG"

          echo "Deploying image: $IMAGE_URL"

          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_URL \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --max-instances=3 \
            --timeout=30s \
            --cpu=1 \
            --memory=512Mi \
            --concurrency=10

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
          echo "Service deployed at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
